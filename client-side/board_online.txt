# def start_online():
#     """Démarrer le gestionnaire en ligne"""
#     def new_server():
#         pass


#     def existing_server():
#         s_num = 0
#         ask_text = text_font.render("Entrer l'id du serveur :", True, YELLOW)
#         ask_rect = ask_text.get_rect()
#         ask_rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)

#         text = ""
#         done = 0
#         while not done:
#             pygame.display.update()

#             pressed_keys = pygame.key.get_pressed()

#             if pressed_keys[K_ESCAPE]:
#                 s_num = 0
#                 pygame.quit()
#                 sys.exit()

#             for event in pygame.event.get():
#                 if event.type == QUIT:
#                     pygame.quit()
#                     sys.exit()

#                 if event.type == KEYDOWN:
#                     if event.key == K_RETURN or event.key == K_KP_ENTER:
#                         if len(text) == 4:
#                             s_num = int(text)
#                             done = 1

#                     elif event.key == K_BACKSPACE:
#                         text = text[:-1]

#                     else:
#                         inp = event.unicode
#                         if inp.isdigit():
#                             if int(text) < 4:
#                                 text += str(inp)

#             board_window.blit(bg, (0, 0))
#             pygame.draw.rect(board_window, PURPLE, ask_rect, border_radius = 10)
#             board_window.blit(ask_text, ask_rect)

#             inp_text = text_font_small.render(text, True, YELLOW)
#             inp_rect = inp_text.get_rect()
#             inp_rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + ask_rect.height + 10)

#             pygame.draw.rect(board_window, PURPLE, inp_rect, border_radius = 10)
#             board_window.blit(inp_text, inp_rect)

#             clock.tick(FPS)

#         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#         s.connect(("cmi-game.ms-corporation.xyz", 80))
#         s.setblocking(0)

#         try:
#             data = s.recv()
#             reply = data.decode('utf-8')

#             try:
#                 if not json.loads(reply)["ask"] == "version":
#                     raise json.decoder.JSONDecodeError

#                 s.send(str.encode(json.dumps({"asw": GAME_VERSION})))
#                 data = s.recv()
#                 reply = data.decode('utf-8')
#                 data_j = json.loads(reply)

#                 if data_j["ask"] and data_j["ask"] == "new or connect":
#                     s.send(str.encode(json.dumps({"asw": "connect", "server_id": s_num})))
#                     data = s.recv()
#                     reply = data.decode('utf-8')
#                     data_j = json.loads(reply)

#                 elif data_j["error"] and data_j["error"] == "invalid answer":
#                     print("Not concording versions")
#                     raise json.decoder.JSONDecodeError

#                 else:
#                     raise json.decoder.JSONDecodeError

#             except json.decoder.JSONDecodeError:
#                 s.close()

#             except KeyError:
#                 s.close()

#         except socket.error as cl_err:
#             print(f"Connexion au serveur fermée : {cl_err}")
#             s.close()

#     players_num = 0
#     exis_s = Button(SCREEN_WIDTH // 3, SCREEN_HEIGHT // 2, 200, 50, board_window).set_text("Rejoindre une partie").set_action(existing_server)
#     new_s = Button(SCREEN_WIDTH // 3 * 2, SCREEN_HEIGHT // 2, 200, 50, board_window).set_text("Nouvelle partie").set_action(new_server)

#     text = ""
#     done = 0
#     while not done:
#         pygame.display.update()

#         pressed_keys = pygame.key.get_pressed()

#         if pressed_keys[K_ESCAPE]:
#             pygame.quit()
#             sys.exit()

#         for event in pygame.event.get():
#             if event.type == MOUSEBUTTONDOWN:
#                 if exis_s.collide_mouse():
#                     existing_server()
#                     done = 1

#                 elif new_s.collide_mouse():
#                     new_server()
#                     done = 1

#         board_window.blit(bg, (0, 0))
#         exis_s.show()
#         new_s.show()

#         clock.tick(FPS)

#     # """Communication avec le serveur"""
#     # global TO_BOARD
#     # global TO_PROCESS

#     # with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
#     #     s.connect((HOST, PORT))

#     #     while True:
#     #         with open("board_in.txt", "r", encoding="utf-8") as f:
#     #             TO_BOARD = f.read()

#     #         s.sendall(TO_BOARD.encode())

#     #         with open("board_out.txt", "w", encoding="utf-8") as f:
#     #             TO_PROCESS = f.read()

#     #         s.sendall(TO_PROCESS.encode())